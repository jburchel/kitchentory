#!/usr/bin/env python
"""
Simple test script for email receipt parsing functionality
"""

import os
import sys
import django

# Setup Django environment
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'kitchentory.settings')
django.setup()

from integrations.enhanced_receipt_parser import EnhancedReceiptParser

def test_basic_parsing():
    """Test basic receipt parsing without database operations"""
    
    print("ðŸ§ª Testing Basic Receipt Parsing (No Database)")
    print("=" * 50)
    
    # Test Instacart parsing
    print("\nðŸ“§ Testing Instacart Receipt...")
    
    email_data = {
        'sender': 'receipts@instacart.com',
        'subject': 'Your Instacart order has been delivered',
        'body': '''
Your Instacart order has been delivered!

Order #IC12345678
Delivered on January 15, 2024

Your order from Whole Foods Market:

2 x Organic Bananas $3.99
1 x Whole Milk, 1 Gallon $4.49
3 x Avocados $5.97
1 x Sourdough Bread $3.29
2 x Greek Yogurt, Vanilla $6.98

Subtotal: $24.72
Tax: $1.98
Tip: $5.00
Total: $31.70

Thank you for shopping with Instacart!
        '''
    }
    
    parser = EnhancedReceiptParser()
    parsed_receipt = parser.parse_email_receipt(email_data)
    
    print(f"âœ… Store Detected: {parsed_receipt.store_name}")
    print(f"âœ… Purchase Date: {parsed_receipt.purchase_date}")
    print(f"âœ… Total Amount: ${parsed_receipt.total}")
    print(f"âœ… Items Found: {len(parsed_receipt.items)}")
    print(f"âœ… Confidence Score: {parsed_receipt.confidence_score:.1%}")
    print(f"âœ… Errors: {len(parsed_receipt.parsing_errors)}")
    
    print(f"\nðŸ“¦ Parsed Items:")
    for i, item in enumerate(parsed_receipt.items, 1):
        print(f"  {i}. {item.name}")
        print(f"     Quantity: {item.quantity} {item.unit}")
        print(f"     Price: ${item.price}")
        print(f"     Category: {item.category}")
        print(f"     Confidence: {item.confidence_score:.1%}")
        print()
    
    # Test Amazon Fresh parsing
    print("\nðŸ“§ Testing Amazon Fresh Receipt...")
    
    amazon_email = {
        'sender': 'auto-confirm@amazon.com',
        'subject': 'Your Amazon Fresh order has been delivered',
        'body': '''
Your Amazon Fresh order has been delivered

Order Date: January 16, 2024
Order Total: $42.83

Items in this order:

Organic Baby Spinach, 5 oz $2.99
Chicken Breast, Boneless Skinless, 2 lbs $8.99
Roma Tomatoes, 2 lbs $3.98
Pasta Sauce, Marinara $2.49
Whole Wheat Pasta, 16 oz $1.99
Fresh Mozzarella Cheese, 8 oz $4.99
Olive Oil, Extra Virgin, 500ml $7.99

Thank you for your order!
        '''
    }
    
    amazon_receipt = parser.parse_email_receipt(amazon_email)
    
    print(f"âœ… Store Detected: {amazon_receipt.store_name}")
    print(f"âœ… Items Found: {len(amazon_receipt.items)}")
    print(f"âœ… Confidence Score: {amazon_receipt.confidence_score:.1%}")
    
    valid_items = [item for item in amazon_receipt.items if item.price and item.price > 0]
    print(f"âœ… Valid Items (with prices): {len(valid_items)}")
    
    print(f"\nðŸ“¦ Valid Amazon Items:")
    for i, item in enumerate(valid_items, 1):
        print(f"  {i}. {item.name} - ${item.price} ({item.confidence_score:.1%})")
    
    # Test Walmart parsing
    print("\nðŸ“§ Testing Walmart Receipt...")
    
    walmart_email = {
        'sender': 'no-reply@walmart.com',
        'subject': 'Your Walmart Grocery order is ready for pickup',
        'body': '''
Your Walmart Grocery order is ready for pickup!

Pickup Date: January 17, 2024
Order Total: $28.64

Items in your order:

Great Value Milk, 1% Lowfat, 1 Gallon $2.78
Bananas, each $0.58
Bread, White, 20 oz Loaf $1.00
Eggs, Large, Grade A, 12 Count $2.48
Cheddar Cheese, Sharp, 8 oz $2.97
Ground Beef, 93/7, 1 lb $5.97
Apples, Gala, 3 lb bag $2.98

Subtotal: $19.76
Tax: $1.58
Total: $21.34

Thank you for choosing Walmart!
        '''
    }
    
    walmart_receipt = parser.parse_email_receipt(walmart_email)
    
    print(f"âœ… Store Detected: {walmart_receipt.store_name}")
    print(f"âœ… Items Found: {len(walmart_receipt.items)}")
    print(f"âœ… Confidence Score: {walmart_receipt.confidence_score:.1%}")
    
    valid_walmart_items = [item for item in walmart_receipt.items if item.price and item.price > 0]
    print(f"âœ… Valid Items (with prices): {len(valid_walmart_items)}")
    
    # Test unknown store (Generic parser)
    print("\nðŸ“§ Testing Unknown Store Receipt...")
    
    unknown_email = {
        'sender': 'receipts@unknownstore.com',
        'subject': 'Your grocery order receipt',
        'body': '''
Receipt #12345
Date: January 18, 2024

Items purchased:

Apples $3.50
Bread $2.25
Milk $4.99
Cheese $5.99

Total: $16.73

Thank you for shopping with us!
        '''
    }
    
    unknown_receipt = parser.parse_email_receipt(unknown_email)
    
    print(f"âœ… Store Detected: {unknown_receipt.store_name}")
    print(f"âœ… Items Found: {len(unknown_receipt.items)}")
    print(f"âœ… Confidence Score: {unknown_receipt.confidence_score:.1%}")
    
    # Summary
    print("\n" + "=" * 50)
    print("ðŸ“Š PARSING TEST RESULTS")
    print("=" * 50)
    print(f"âœ… Instacart: {len(parsed_receipt.items)} items, {parsed_receipt.confidence_score:.1%} confidence")
    print(f"âœ… Amazon Fresh: {len(valid_items)} valid items, {amazon_receipt.confidence_score:.1%} confidence")
    print(f"âœ… Walmart: {len(valid_walmart_items)} valid items, {walmart_receipt.confidence_score:.1%} confidence")
    print(f"âœ… Unknown Store: {len(unknown_receipt.items)} items, {unknown_receipt.confidence_score:.1%} confidence")
    
    print(f"\nðŸŽ¯ Key Capabilities Verified:")
    print(f"  âœ… Store detection from email sender")
    print(f"  âœ… Date extraction from receipt text")
    print(f"  âœ… Item name parsing and cleaning")
    print(f"  âœ… Quantity and unit detection")
    print(f"  âœ… Price extraction and validation")
    print(f"  âœ… Category inference")
    print(f"  âœ… Confidence scoring")
    print(f"  âœ… Generic parser fallback")
    
    total_items = len(parsed_receipt.items) + len(valid_items) + len(valid_walmart_items) + len(unknown_receipt.items)
    print(f"\nðŸš€ Total Items Parsed: {total_items}")
    print(f"ðŸŽ‰ Email Receipt Parsing System: WORKING!")

if __name__ == '__main__':
    test_basic_parsing()