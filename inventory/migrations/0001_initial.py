# Generated by Django 5.2.3 on 2025-06-22 00:45

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("accounts", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                ("slug", models.SlugField(unique=True, verbose_name="slug")),
                (
                    "color",
                    models.CharField(
                        default="#6B7280", max_length=7, verbose_name="color"
                    ),
                ),
                (
                    "icon",
                    models.CharField(blank=True, max_length=50, verbose_name="icon"),
                ),
                ("order", models.IntegerField(default=0, verbose_name="display order")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="inventory.category",
                    ),
                ),
            ],
            options={
                "verbose_name": "category",
                "verbose_name_plural": "categories",
                "db_table": "categories",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "barcode",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=50,
                        null=True,
                        unique=True,
                        verbose_name="barcode",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True, max_length=200, verbose_name="name"
                    ),
                ),
                (
                    "brand",
                    models.CharField(blank=True, max_length=100, verbose_name="brand"),
                ),
                (
                    "serving_size",
                    models.CharField(
                        blank=True, max_length=50, verbose_name="serving size"
                    ),
                ),
                (
                    "calories",
                    models.IntegerField(blank=True, null=True, verbose_name="calories"),
                ),
                ("image_url", models.URLField(blank=True, verbose_name="image URL")),
                (
                    "thumbnail_url",
                    models.URLField(blank=True, verbose_name="thumbnail URL"),
                ),
                (
                    "source",
                    models.CharField(
                        blank=True,
                        help_text="e.g., OpenFoodFacts, manual",
                        max_length=50,
                        verbose_name="data source",
                    ),
                ),
                (
                    "verified",
                    models.BooleanField(default=False, verbose_name="verified"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "category",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="products",
                        to="inventory.category",
                    ),
                ),
            ],
            options={
                "verbose_name": "product",
                "verbose_name_plural": "products",
                "db_table": "products",
            },
        ),
        migrations.CreateModel(
            name="ProductBarcode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "barcode",
                    models.CharField(
                        db_index=True,
                        max_length=50,
                        unique=True,
                        verbose_name="barcode",
                    ),
                ),
                (
                    "package_size",
                    models.CharField(
                        blank=True,
                        help_text="e.g., 500ml, 1kg",
                        max_length=50,
                        verbose_name="package size",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="additional_barcodes",
                        to="inventory.product",
                    ),
                ),
            ],
            options={
                "verbose_name": "product barcode",
                "verbose_name_plural": "product barcodes",
                "db_table": "product_barcodes",
            },
        ),
        migrations.CreateModel(
            name="ShoppingListItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=2,
                        default=1,
                        max_digits=10,
                        verbose_name="quantity",
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        choices=[
                            ("count", "Count"),
                            ("g", "Grams"),
                            ("kg", "Kilograms"),
                            ("ml", "Milliliters"),
                            ("l", "Liters"),
                            ("oz", "Ounces"),
                            ("lb", "Pounds"),
                            ("cup", "Cups"),
                            ("tbsp", "Tablespoons"),
                            ("tsp", "Teaspoons"),
                        ],
                        default="count",
                        max_length=10,
                        verbose_name="unit",
                    ),
                ),
                (
                    "is_purchased",
                    models.BooleanField(default=False, verbose_name="purchased"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="shopping_items",
                        to="inventory.product",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="shopping_items",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "shopping list item",
                "verbose_name_plural": "shopping list items",
                "db_table": "shopping_list_items",
            },
        ),
        migrations.CreateModel(
            name="StorageLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="name")),
                (
                    "location_type",
                    models.CharField(
                        choices=[
                            ("fridge", "Refrigerator"),
                            ("freezer", "Freezer"),
                            ("pantry", "Pantry"),
                            ("counter", "Counter"),
                            ("cabinet", "Cabinet"),
                            ("other", "Other"),
                        ],
                        default="pantry",
                        max_length=20,
                        verbose_name="type",
                    ),
                ),
                (
                    "temperature",
                    models.FloatField(
                        blank=True,
                        help_text="Average temperature for expiration calculations",
                        null=True,
                        verbose_name="temperature (°C)",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="notes")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "household",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="storage_locations",
                        to="accounts.household",
                    ),
                ),
            ],
            options={
                "verbose_name": "storage location",
                "verbose_name_plural": "storage locations",
                "db_table": "storage_locations",
            },
        ),
        migrations.CreateModel(
            name="InventoryItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="quantity",
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        choices=[
                            ("count", "Count"),
                            ("g", "Grams"),
                            ("kg", "Kilograms"),
                            ("ml", "Milliliters"),
                            ("l", "Liters"),
                            ("oz", "Ounces"),
                            ("lb", "Pounds"),
                            ("cup", "Cups"),
                            ("tbsp", "Tablespoons"),
                            ("tsp", "Teaspoons"),
                        ],
                        default="count",
                        max_length=10,
                        verbose_name="unit",
                    ),
                ),
                (
                    "purchase_date",
                    models.DateField(
                        default=django.utils.timezone.now, verbose_name="purchase date"
                    ),
                ),
                (
                    "expiration_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="expiration date"
                    ),
                ),
                (
                    "opened_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when the item was opened",
                        null=True,
                        verbose_name="opened date",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="price",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="notes")),
                (
                    "is_consumed",
                    models.BooleanField(default=False, verbose_name="consumed"),
                ),
                (
                    "consumed_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="consumed date"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "household",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="inventory_items",
                        to="accounts.household",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="inventory_items",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="inventory_items",
                        to="inventory.product",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="items",
                        to="inventory.storagelocation",
                    ),
                ),
            ],
            options={
                "verbose_name": "inventory item",
                "verbose_name_plural": "inventory items",
                "db_table": "inventory_items",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="product",
            index=models.Index(
                fields=["name", "brand"], name="products_name_60583f_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="storagelocation",
            unique_together={("household", "name")},
        ),
    ]
