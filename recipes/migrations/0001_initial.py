# Generated by Django 5.2.3 on 2025-06-22 02:00

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("inventory", "0007_remove_product_products_search__7bdc4d_gin_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="RecipeTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=50, unique=True, verbose_name="name"),
                ),
                ("slug", models.SlugField(unique=True, verbose_name="slug")),
                (
                    "color",
                    models.CharField(
                        default="#6B7280", max_length=7, verbose_name="color"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "recipe tag",
                "verbose_name_plural": "recipe tags",
                "db_table": "recipe_tags",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="RecipeCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="name"),
                ),
                ("slug", models.SlugField(unique=True, verbose_name="slug")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "color",
                    models.CharField(
                        default="#6B7280", max_length=7, verbose_name="color"
                    ),
                ),
                (
                    "icon",
                    models.CharField(blank=True, max_length=50, verbose_name="icon"),
                ),
                ("order", models.IntegerField(default=0, verbose_name="display order")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="recipes.recipecategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "recipe category",
                "verbose_name_plural": "recipe categories",
                "db_table": "recipe_categories",
                "ordering": ["order", "name"],
            },
        ),
        migrations.CreateModel(
            name="Recipe",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        db_index=True, max_length=200, verbose_name="title"
                    ),
                ),
                (
                    "slug",
                    models.SlugField(max_length=220, unique=True, verbose_name="slug"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "prep_time",
                    models.IntegerField(
                        help_text="Time to prepare ingredients",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="preparation time (minutes)",
                    ),
                ),
                (
                    "cook_time",
                    models.IntegerField(
                        help_text="Time to cook the recipe",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="cooking time (minutes)",
                    ),
                ),
                (
                    "total_time",
                    models.IntegerField(
                        help_text="Total time including prep and cook",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="total time (minutes)",
                    ),
                ),
                (
                    "difficulty",
                    models.CharField(
                        choices=[
                            ("easy", "Easy"),
                            ("medium", "Medium"),
                            ("hard", "Hard"),
                        ],
                        default="easy",
                        max_length=10,
                        verbose_name="difficulty",
                    ),
                ),
                (
                    "servings",
                    models.IntegerField(
                        default=4,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="servings",
                    ),
                ),
                (
                    "serving_unit",
                    models.CharField(
                        choices=[
                            ("servings", "Servings"),
                            ("portions", "Portions"),
                            ("people", "People"),
                            ("pieces", "Pieces"),
                        ],
                        default="servings",
                        max_length=20,
                        verbose_name="serving unit",
                    ),
                ),
                (
                    "calories_per_serving",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="calories per serving",
                    ),
                ),
                (
                    "protein_grams",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="protein (grams)",
                    ),
                ),
                (
                    "carb_grams",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="carbohydrates (grams)",
                    ),
                ),
                (
                    "fat_grams",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="fat (grams)",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="recipes/",
                        verbose_name="recipe image",
                    ),
                ),
                (
                    "image_url",
                    models.URLField(
                        blank=True, null=True, verbose_name="external image URL"
                    ),
                ),
                (
                    "video_url",
                    models.URLField(
                        blank=True,
                        help_text="YouTube, Vimeo, etc.",
                        verbose_name="video URL",
                    ),
                ),
                (
                    "source_name",
                    models.CharField(
                        blank=True,
                        help_text='e.g., "Grandma\'s Recipe", "Food Network", etc.',
                        max_length=200,
                        verbose_name="source name",
                    ),
                ),
                (
                    "source_url",
                    models.URLField(
                        blank=True,
                        help_text="Original recipe URL if imported",
                        verbose_name="source URL",
                    ),
                ),
                (
                    "author",
                    models.CharField(blank=True, max_length=200, verbose_name="author"),
                ),
                (
                    "is_public",
                    models.BooleanField(default=False, verbose_name="public recipe"),
                ),
                (
                    "is_verified",
                    models.BooleanField(default=False, verbose_name="verified recipe"),
                ),
                (
                    "is_vegetarian",
                    models.BooleanField(default=False, verbose_name="vegetarian"),
                ),
                ("is_vegan", models.BooleanField(default=False, verbose_name="vegan")),
                (
                    "is_gluten_free",
                    models.BooleanField(default=False, verbose_name="gluten-free"),
                ),
                (
                    "is_dairy_free",
                    models.BooleanField(default=False, verbose_name="dairy-free"),
                ),
                (
                    "is_nut_free",
                    models.BooleanField(default=False, verbose_name="nut-free"),
                ),
                (
                    "view_count",
                    models.IntegerField(default=0, verbose_name="view count"),
                ),
                (
                    "like_count",
                    models.IntegerField(default=0, verbose_name="like count"),
                ),
                (
                    "rating_average",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="average rating",
                    ),
                ),
                (
                    "rating_count",
                    models.IntegerField(default=0, verbose_name="rating count"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_recipes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="recipes",
                        to="recipes.recipecategory",
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True, related_name="recipes", to="recipes.recipetag"
                    ),
                ),
            ],
            options={
                "verbose_name": "recipe",
                "verbose_name_plural": "recipes",
                "db_table": "recipes",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RecipeIngredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text='Name as it appears in recipe (e.g., "large onion", "fresh basil")',
                        max_length=200,
                        verbose_name="ingredient name",
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="quantity",
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("count", "Count"),
                            ("g", "Grams"),
                            ("kg", "Kilograms"),
                            ("ml", "Milliliters"),
                            ("l", "Liters"),
                            ("oz", "Ounces"),
                            ("lb", "Pounds"),
                            ("cup", "Cups"),
                            ("tbsp", "Tablespoons"),
                            ("tsp", "Teaspoons"),
                            ("pinch", "Pinch"),
                            ("dash", "Dash"),
                            ("slice", "Slice"),
                            ("clove", "Clove"),
                            ("bunch", "Bunch"),
                            ("head", "Head"),
                            ("can", "Can"),
                            ("jar", "Jar"),
                            ("package", "Package"),
                            ("to_taste", "To taste"),
                        ],
                        max_length=20,
                        verbose_name="unit",
                    ),
                ),
                (
                    "preparation",
                    models.CharField(
                        blank=True,
                        help_text='e.g., "diced", "chopped", "minced", "at room temperature"',
                        max_length=200,
                        verbose_name="preparation",
                    ),
                ),
                (
                    "group",
                    models.CharField(
                        blank=True,
                        help_text='e.g., "For the sauce", "For the topping", "Garnish"',
                        max_length=100,
                        verbose_name="ingredient group",
                    ),
                ),
                ("order", models.IntegerField(default=0, verbose_name="display order")),
                (
                    "is_optional",
                    models.BooleanField(
                        default=False, verbose_name="optional ingredient"
                    ),
                ),
                (
                    "is_garnish",
                    models.BooleanField(default=False, verbose_name="garnish"),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional preparation or substitution notes",
                        verbose_name="notes",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        help_text="Link to product in inventory system",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recipe_ingredients",
                        to="inventory.product",
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ingredients",
                        to="recipes.recipe",
                    ),
                ),
            ],
            options={
                "verbose_name": "recipe ingredient",
                "verbose_name_plural": "recipe ingredients",
                "db_table": "recipe_ingredients",
                "ordering": ["order", "id"],
                "unique_together": {("recipe", "order")},
            },
        ),
        migrations.CreateModel(
            name="RecipeStep",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("step_number", models.IntegerField(verbose_name="step number")),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text='Optional title for the step (e.g., "Prepare the sauce")',
                        max_length=200,
                        verbose_name="step title",
                    ),
                ),
                (
                    "instruction",
                    models.TextField(
                        help_text="Detailed step-by-step instruction",
                        verbose_name="instruction",
                    ),
                ),
                (
                    "step_type",
                    models.CharField(
                        choices=[
                            ("prep", "Preparation"),
                            ("cook", "Cooking"),
                            ("bake", "Baking"),
                            ("fry", "Frying"),
                            ("boil", "Boiling"),
                            ("mix", "Mixing"),
                            ("rest", "Resting/Waiting"),
                            ("serve", "Serving"),
                            ("other", "Other"),
                        ],
                        default="other",
                        max_length=10,
                        verbose_name="step type",
                    ),
                ),
                (
                    "time_minutes",
                    models.IntegerField(
                        blank=True,
                        help_text="Time required for this step",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="time (minutes)",
                    ),
                ),
                (
                    "temperature",
                    models.IntegerField(
                        blank=True,
                        help_text="Cooking temperature in Celsius",
                        null=True,
                        verbose_name="temperature",
                    ),
                ),
                (
                    "temperature_unit",
                    models.CharField(
                        choices=[("C", "Celsius"), ("F", "Fahrenheit")],
                        default="C",
                        max_length=1,
                        verbose_name="temperature unit",
                    ),
                ),
                (
                    "equipment_needed",
                    models.CharField(
                        blank=True,
                        help_text='e.g., "large skillet", "food processor", "oven"',
                        max_length=200,
                        verbose_name="equipment needed",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        help_text="Optional image showing the result of this step",
                        null=True,
                        upload_to="recipes/steps/",
                        verbose_name="step image",
                    ),
                ),
                (
                    "video_url",
                    models.URLField(
                        blank=True,
                        help_text="Optional video demonstration of this step",
                        verbose_name="step video URL",
                    ),
                ),
                (
                    "tips",
                    models.TextField(
                        blank=True,
                        help_text="Additional tips or troubleshooting notes for this step",
                        verbose_name="tips and notes",
                    ),
                ),
                (
                    "is_critical",
                    models.BooleanField(
                        default=False,
                        help_text="Mark as critical if this step significantly affects the outcome",
                        verbose_name="critical step",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "ingredients_used",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Ingredients used in this step",
                        related_name="used_in_steps",
                        to="recipes.recipeingredient",
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="steps",
                        to="recipes.recipe",
                    ),
                ),
            ],
            options={
                "verbose_name": "recipe step",
                "verbose_name_plural": "recipe steps",
                "db_table": "recipe_steps",
                "ordering": ["step_number"],
                "unique_together": {("recipe", "step_number")},
            },
        ),
        migrations.CreateModel(
            name="CookingSession",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planning", "Planning"),
                            ("shopping", "Shopping"),
                            ("prepping", "Prepping"),
                            ("cooking", "Cooking"),
                            ("completed", "Completed"),
                            ("paused", "Paused"),
                            ("abandoned", "Abandoned"),
                        ],
                        default="planning",
                        max_length=15,
                        verbose_name="status",
                    ),
                ),
                (
                    "servings_planned",
                    models.IntegerField(
                        default=4,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="planned servings",
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="started at"
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="completed at"
                    ),
                ),
                (
                    "total_cooking_time",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="total cooking time (minutes)",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes about this cooking session",
                        verbose_name="session notes",
                    ),
                ),
                (
                    "modifications_made",
                    models.TextField(
                        blank=True,
                        help_text="Changes made during cooking",
                        verbose_name="modifications made",
                    ),
                ),
                (
                    "success_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="How well did the recipe turn out? (1=disaster, 5=perfect)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="success rating",
                    ),
                ),
                (
                    "would_repeat",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="would repeat"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cooking_sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cooking_sessions",
                        to="recipes.recipe",
                    ),
                ),
                (
                    "current_step",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="active_sessions",
                        to="recipes.recipestep",
                    ),
                ),
            ],
            options={
                "verbose_name": "cooking session",
                "verbose_name_plural": "cooking sessions",
                "db_table": "cooking_sessions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserRecipeInteraction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "interaction_type",
                    models.CharField(
                        choices=[
                            ("view", "Viewed"),
                            ("like", "Liked"),
                            ("save", "Saved"),
                            ("cook", "Cooked"),
                            ("rate", "Rated"),
                            ("share", "Shared"),
                        ],
                        max_length=10,
                        verbose_name="interaction type",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_interactions",
                        to="recipes.recipe",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recipe_interactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "user recipe interaction",
                "verbose_name_plural": "user recipe interactions",
                "db_table": "user_recipe_interactions",
            },
        ),
        migrations.CreateModel(
            name="RecipeReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.IntegerField(
                        help_text="Rating from 1 to 5 stars",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="rating",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="review title"
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True,
                        help_text="Optional detailed review",
                        verbose_name="comment",
                    ),
                ),
                (
                    "made_modifications",
                    models.BooleanField(
                        default=False, verbose_name="made modifications"
                    ),
                ),
                (
                    "modifications_description",
                    models.TextField(
                        blank=True,
                        help_text="Describe any changes made to the original recipe",
                        verbose_name="modifications description",
                    ),
                ),
                (
                    "difficulty_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="How difficult was this recipe to make? (1=very easy, 5=very hard)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="difficulty rating",
                    ),
                ),
                (
                    "would_make_again",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="would make again"
                    ),
                ),
                (
                    "cooking_time_actual",
                    models.IntegerField(
                        blank=True,
                        help_text="How long did it actually take you?",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="actual cooking time (minutes)",
                    ),
                ),
                (
                    "is_verified_cook",
                    models.BooleanField(
                        default=False,
                        help_text="User has demonstrated they actually cooked this recipe",
                        verbose_name="verified cook",
                    ),
                ),
                (
                    "helpful_votes",
                    models.IntegerField(default=0, verbose_name="helpful votes"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "recipe",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="recipes.recipe",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recipe_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "recipe review",
                "verbose_name_plural": "recipe reviews",
                "db_table": "recipe_reviews",
                "ordering": ["-created_at"],
                "unique_together": {("user", "recipe")},
            },
        ),
        migrations.AddIndex(
            model_name="recipe",
            index=models.Index(fields=["title"], name="recipes_title_2ff3f7_idx"),
        ),
        migrations.AddIndex(
            model_name="recipe",
            index=models.Index(
                fields=["category", "difficulty"], name="recipes_categor_4db632_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="recipe",
            index=models.Index(
                fields=["total_time", "servings"], name="recipes_total_t_16a8ab_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="recipe",
            index=models.Index(
                fields=["is_public", "is_verified"], name="recipes_is_publ_3d8e9f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userrecipeinteraction",
            index=models.Index(
                fields=["user", "interaction_type"],
                name="user_recipe_user_id_791bf7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="userrecipeinteraction",
            index=models.Index(
                fields=["recipe", "interaction_type"],
                name="user_recipe_recipe__3c95c9_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="userrecipeinteraction",
            unique_together={("user", "recipe", "interaction_type")},
        ),
    ]
