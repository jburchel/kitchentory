version: '3.8'

services:
  # Web Application
  web:
    image: ghcr.io/kitchentory/kitchentory:main
    restart: unless-stopped
    environment:
      - DEBUG=False
      - ENVIRONMENT=staging
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgres://kitchentory:${DB_PASSWORD}@db:5432/kitchentory
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_ENVIRONMENT=staging
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_STORAGE_BUCKET_NAME=${AWS_STORAGE_BUCKET_NAME}
      - AWS_S3_REGION_NAME=${AWS_S3_REGION_NAME}
    depends_on:
      - db
      - redis
    volumes:
      - media_data:/app/media
      - static_data:/app/static
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kitchentory-staging.rule=Host(`staging.kitchentory.com`)"
      - "traefik.http.routers.kitchentory-staging.tls=true"
      - "traefik.http.routers.kitchentory-staging.tls.certresolver=letsencrypt"
      - "traefik.http.services.kitchentory-staging.loadbalancer.server.port=8000"
      - "traefik.http.middlewares.staging-auth.basicauth.users=${BASIC_AUTH_USERS}"
      - "traefik.http.routers.kitchentory-staging.middlewares=staging-auth"

  # Celery Worker
  celery-worker:
    image: ghcr.io/kitchentory/kitchentory:main
    restart: unless-stopped
    command: celery -A kitchentory worker -l info --concurrency=2
    environment:
      - DEBUG=False
      - ENVIRONMENT=staging
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgres://kitchentory:${DB_PASSWORD}@db:5432/kitchentory
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_ENVIRONMENT=staging
    depends_on:
      - db
      - redis
    volumes:
      - media_data:/app/media
    networks:
      - app-network

  # Celery Beat (Scheduler)
  celery-beat:
    image: ghcr.io/kitchentory/kitchentory:main
    restart: unless-stopped
    command: celery -A kitchentory beat -l info
    environment:
      - DEBUG=False
      - ENVIRONMENT=staging
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgres://kitchentory:${DB_PASSWORD}@db:5432/kitchentory
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_ENVIRONMENT=staging
    depends_on:
      - db
      - redis
    volumes:
      - celery_beat_data:/app/celerybeat-schedule
    networks:
      - app-network

  # Database
  db:
    image: postgres:13
    restart: unless-stopped
    environment:
      - POSTGRES_DB=kitchentory
      - POSTGRES_USER=kitchentory
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kitchentory"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:6-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Reverse Proxy (Traefik)
  traefik:
    image: traefik:v2.10
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt_data:/letsencrypt
      - static_data:/static:ro
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.staging.kitchentory.com`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_AUTH_USERS}"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.staging.kitchentory.com`)"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.middlewares.prometheus-auth.basicauth.users=${PROMETHEUS_AUTH_USERS}"
      - "traefik.http.routers.prometheus.middlewares=prometheus-auth"

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.staging.kitchentory.com`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Log Aggregation - Loki
  loki:
    image: grafana/loki:latest
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - app-network

  # Log Collection - Promtail
  promtail:
    image: grafana/promtail:latest
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    networks:
      - app-network

  # Database Backup
  db-backup:
    image: postgres:13
    restart: "no"
    environment:
      - POSTGRES_DB=kitchentory
      - POSTGRES_USER=kitchentory
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - backup_data:/backups
      - ./scripts/backup.sh:/usr/local/bin/backup.sh
    command: |
      sh -c '
        echo "$BACKUP_SCHEDULE /usr/local/bin/backup.sh" | crontab -
        crond -f
      '
    depends_on:
      - db
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  media_data:
    driver: local
  static_data:
    driver: local
  celery_beat_data:
    driver: local
  letsencrypt_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  backup_data:
    driver: local

networks:
  app-network:
    driver: bridge